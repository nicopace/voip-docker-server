#!KAMAILIO
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!define WITH_DEBUG
#!ifdef WITH_DEBUG
debug=5
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif
memdbg=5
memlog=5
log_facility=LOG_LOCAL0
children=8
listen=0.0.0.0:5090
/* port to listen to */
port=5090
#!ifdef WITH_TLS
enable_tls=yes
#!endif
tcp_connection_lifetime=3605
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
#!endif
#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif
loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif
#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif
#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif
#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 120000)
modparam("rr", "enable_full_lr", 0)
modparam("rr", "append_fromtag", 0)
modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)
# disable AOR limit
modparam("registrar", "max_contacts", 0)
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
#!ifdef WITH_TLS
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif
#!ifdef WITH_DEBUG
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif
request_route {
	route(REQINIT);
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}
	route(WITHINDLG);
	if(t_precheck_trans()) {
		t_check_trans();
		exit;
	}
	t_check_trans();
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}
	route(SIPOUT);
	route(PRESENCE);
	route(REGISTRAR);
	if ($rU==$null) {
		sl_send_reply("484","Address Incomplete");
		exit;
	}
	route(LOCATION);
}
route[RELAY] {
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}
route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}
	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}
	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}
route[WITHINDLG] {
	if (!has_totag()) return;
	if (loose_route()) {
		route(DLGURI);
		if (is_method("NOTIFY")) {
			record_route();
		}
		route(RELAY);
		exit;
	}
	if (is_method("SUBSCRIBE") && uri == myself) {
		route(PRESENCE);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			route(RELAY);
			exit;
		} else {
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}
route[REGISTRAR] {
	if (!is_method("REGISTER")) return;
	if(isflagset(FLT_NATS)) {
		setbflag(FLB_NATB);
	}
	if (!save("location")) {
		sl_reply_error();
	}
	exit;
}
route[LOCATION] {
	$avp(oexten) = $rU;
	if (!lookup("location")) {
		$var(rc) = $rc;
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}
	if (is_method("INVITE")) {
		setflag(FLT_ACCMISSED);
	}
	route(RELAY);
	exit;
}
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE")) return;
	if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
		sl_send_reply("404", "No voicemail service");
		exit;
	}
	if (is_method("PUBLISH") || $rU==$null) {
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}
route[DLGURI] {
	return;
}
route[SIPOUT] {
	if (uri==myself) return;
	append_hf("P-hint: outbound\r\n");
	route(RELAY);
	exit;
}
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
}
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");
}
failure_route[MANAGE_FAILURE] {
	if (t_is_canceled()) exit;
}
